<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
    <title>Notification</title>
    <style>
body, h1, h2, h3, h4, h5, h6, p, a, span, li, button, input, textarea {
    font-family: 'Poppins', sans-serif;
}

/* Header Styling */
header {
    background-color: #ffffff;
    padding: 10px 20px;
    color: black;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add subtle shadow for depth */
    position: fixed; /* Make the header fixed */
    top: 0; /* Position it at the top of the page */
    left: 0; /* Align to the left */
    right: 0; /* Align to the right */
    z-index: 1000; /* Ensure it stays above other content */
}

/* Prevent the body content from being hidden under the navbar */
body {
    padding-top: 70px; /* Add top padding equal to the height of the navbar */
}

/* Styling for the navigation */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
}

/* Styling for the logo container */
.logo {
    display: flex;
    align-items: center;
}

.logo h1 {
    margin: 0;
    font-size: 24px; /* Adjust the font size for better visibility */
    font-family: 'Poppins', sans-serif; /* Apply Poppins to logo */
}

/* Styling for the logo image */
.logo-img {
    width: 45px; /* Adjust the size of the logo */
    height: 45px; /* Make height and width the same to create a perfect circle */
    border-radius: 50%; /* This makes the image circular */
    object-fit: cover; /* Ensures the image covers the entire area without stretching */
    margin-right: 15px; /* Space between the logo and the heading */
}

/* Navigation menu styles */
nav {
    flex-grow: 1; /* Allow nav to take up available space */
}

nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: flex-end; /* Align menu items to the right */
    align-items: center; /* Vertically center the menu items */
}

nav ul li {
    margin-left: 50px; /* Space between menu items */
}

nav ul li a {
    text-decoration: none;
    color: black;
    font-weight: bold;
    padding: 10px 15px; /* Add vertical and horizontal padding for spacing */
    transition: background-color 0.3s; /* Smooth transition for hover effects */
    font-family: 'Poppins', sans-serif; /* Apply Poppins to navigation links */
}

nav ul li a:hover {
    background-color: #f0f0f0; /* Light background on hover */
    border-radius: 5px; /* Rounded corners on hover */
}

/* Profile Dropdown Styles */
.profile {
    position: relative;
    cursor: pointer;
}

.profile-pic {
    width: 40px; /* Adjust size as needed */
    height: 40px; /* Adjust size as needed */
    border-radius: 50%;
}

/* Dropdown menu positioning */
.dropdown {
    display: none; /* Hidden by default */
    position: absolute;
    top: 50px; /* Adjust based on your layout */
    right: 0;
    background-color: white;
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    z-index: 1;
}

.dropdown a {
    display: block;
    padding: 10px 20px;
    text-decoration: none;
    color: black;
}

.dropdown a:hover {
    background-color: #f1f1f1;
}

.dropdown.show {
    display: block; /* Show dropdown when toggled */
}

table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    
    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd; /* Add border to cells */
    }

    th {
        background-color: #f4f4f4; /* Light gray background for header */
    }

    .actions {
        display: flex; /* Align actions in a row */
        gap: 10px; /* Space between buttons */
    }
    </style>
</head>
<body>
    <header>
        <div class="navbar">
            <div class="logo">
                <img src="/images/logo.png" alt="Company Logo" class="logo-img">
                <h1>Workforce International Inc.</h1>
            </div>
            <nav>
                <ul>
                    <li><a href="/userdashboard#hero">Home</a></li>
                    <li><a href="/userdashboard#jobs">Work</a></li>
                    <li><a href="/userdashboard#founder">About</a></li>
                    <li><a href="/userdashboard#contact">Contact</a></li>
                    <li class="profile">
                        <img src="<%= user.profilePicture %>" alt="Profile" class="profile-pic" onclick="toggleDropdown()">
                        <div class="dropdown" id="dropdownMenu">
                            <a href="/profile">Profile</a> <!-- Redirects to Profile Page -->
                            <a href="#" onclick="showNotifications()">Notifications</a>
                            <a href="#" onclick="logout()">Logout</a>
                        </div>
                    </li>                    
                </ul>
            </nav>
        </div>
    </header>
    
    <div class="content">
        <h2>Your Notifications</h2>
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Subject</th>
                    <th>Message</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Messages will be displayed here -->
            </tbody>
        </table>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/api/messages'); // Fetch messages from the API
                const messages = await response.json(); // Parse JSON response
    
                const tbody = document.querySelector('tbody'); // Select the table body
                tbody.innerHTML = ''; // Clear existing content
    
                // Loop through each message and create table rows
                messages.forEach(message => {
                    const row = document.createElement('tr');
                    const actionCell = message.isReviewed ? `
                        <td>${message.status}</td>
                    ` : `
                        <td>
                            <div class="actions">
                                <button class="btn-decline" onclick="respondToMessage('${message.id}', 'decline')">Decline</button>
                                <button class="btn-accept" onclick="respondToMessage('${message.id}', 'accept')">Accept</button>
                            </div>
                        </td>
                    `;
    
                    row.innerHTML = `
                        <td>${message.name}</td>
                        <td>${message.email}</td>
                        <td>${message.subject}</td>
                        <td>${message.message}</td>
                        <td>${!message.isReviewed ? 'Pending' : message.status}</td>
                    `;
    
                    // Append the action cell conditionally based on message review status
                    row.querySelector('td:last-child').innerHTML = actionCell;
    
                    tbody.appendChild(row); // Append the row to the table body
                });
            } catch (error) {
                console.error('Error fetching messages:', error);
            }
        });
    
        function respondToMessage(messageId, action) {
            // Implement the logic for accepting or declining the message
            console.log(`Message ID: ${messageId}, Action: ${action}`);
        }
    </script>
    
</body>
</html>
